# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04]
        preset: [pico-rp2040-gcc-reldebinfo, pico-rp2040-gcc-release]
        include:
          - os: ubuntu-24.04
            preset: pico-rp2040-gcc-reldebinfo
            config: reldebinfo
            device: rp2040
            suffix: d
          - os: ubuntu-24.04
            preset: pico-rp2040-gcc-release
            config: release
            device: rp2040
            suffix:

    steps:
    - uses: actions/checkout@v4

    - name: Install ARM GCC
      run: |
        sudo apt update
        sudo apt install -y gcc-arm-none-eabi

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/.${{ matrix.preset }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake --preset ${{ matrix.preset }} -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build --preset ${{ matrix.preset }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: binary-${{ matrix.preset }}

        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: |
          build/.${{ matrix.preset }}/src/*/*.a

        # The desired behavior if no files are found using the provided path.
        # Available Options:
        #   warn: Output a warning but do not fail the action
        #   error: Fail the action with an error message
        #   ignore: Do not output any warnings or errors, the action does not fail
        # Optional. Default is 'warn'
        if-no-files-found: error

        # The level of compression for Zlib to be applied to the artifact archive.
        # The value can range from 0 to 9.
        # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
        # Optional. Default is '6'
        compression-level: 5

    - name: Create Release
      uses: ncipollo/release-action@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref_name }}
        artifacts: 'build/.${{ matrix.preset }}/src/*/*.a'
        asset_name: 'libembed_test-${{ github.ref_name }}-${{ matrix.device }}${{ matrix.suffix }}.a'
        token: ${{ secrets.GITHUB_TOKEN }}
