# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    runs-on: ubuntu-24.04

    outputs:
      toolchain-path: ${{ steps.toolchain.outputs.path }}

    steps:
    - id: toolchain
      name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: latest
        path-env-var: GNU_ARM_TOOLCHAIN

    - run: echo "GNU_ARM_TOOLCHAIN=${{ steps.toolchain.outputs.path }}" >> $GITHUB_ENV

  build:
    permissions:
      contents: write

    needs: setup

    runs-on: ubuntu-24.04

    env:
      GNU_ARM_TOOLCHAIN: ${{ needs.setup.outputs.toolchain-path }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Pico RP2040, RelWithDebInfo>
      # 2. <Pico RP2040, Release>
      # 3. <Pico RP2350, RelWithDebInfo>
      # 4. <Pico RP2350, Release>
      matrix:
        preset:
        - pico-rp2040-gcc-reldebinfo
        - pico-rp2040-gcc-release
        - pico-rp2350-gcc-reldebinfo
        - pico-rp2350-gcc-release
        include:
          - preset: pico-rp2040-gcc-reldebinfo
            config: debug
            device: rp2040
          - preset: pico-rp2040-gcc-release
            config: release
            device: rp2040
          - preset: pico-rp2350-gcc-reldebinfo
            config: debug
            device: rp2350
          - preset: pico-rp2350-gcc-release
            config: release
            device: rp2350

    steps:
    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: latest
        path-env-var: GNU_ARM_TOOLCHAIN

    - name: Check Arm GNU Toolchain version
      run: ${{ needs.setup.outputs.toolchain-path }}/arm-none-eabi-gcc --version

    - uses: actions/checkout@v4

    - id: strings
      name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/.${{ matrix.preset }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake --preset ${{ matrix.preset }} -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build --preset ${{ matrix.preset }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: ${{ matrix.device }}-${{ matrix.config }}

        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: |
          build/.${{ matrix.preset }}/src/*/*.a
          build/.${{ matrix.preset }}/src/*/*.dis

        # The desired behavior if no files are found using the provided path.
        # Available Options:
        #   warn: Output a warning but do not fail the action
        #   error: Fail the action with an error message
        #   ignore: Do not output any warnings or errors, the action does not fail
        # Optional. Default is 'warn'
        if-no-files-found: error

        # The level of compression for Zlib to be applied to the artifact archive.
        # The value can range from 0 to 9.
        # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
        # Optional. Default is '6'
        compression-level: 5

    - name: Copy and rename binary
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p upload
        cp build/.${{ matrix.preset }}/src/sample/libembed_test*.a upload/libembed_test-${{ github.ref_name }}-${{ matrix.device }}-${{ matrix.config }}.a

    - if: startsWith(github.ref, 'refs/tags/')
      name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        tag: ${{ github.ref_name }}
        artifacts: upload/libembed_test-${{ github.ref_name }}-${{ matrix.device }}-${{ matrix.config }}.a
        token: ${{ secrets.GITHUB_TOKEN }}
